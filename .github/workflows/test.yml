name: 'build-test'
on: # rebuild any PRs and main branch changes
  pull_request:
  push:
    branches:
      - main
      - 'releases/*'

jobs:
  build: # make sure build/ci work properly
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          npm install
      - run: |
          npm run all
      - uses: actions/upload-artifact@v2
        with: 
          name: built
          if-no-files-found: error
          path: |
            dist
            action.yml
  test: # make sure the action works on a clean machine without building
    runs-on: ${{ matrix.on }}
    needs: [build]
    strategy:
      matrix: 
        version:
          # waiting for closer
          #- "17:1.17.1-37.1.1"
          - "8:1.16.5-36.2.29"
          - "8:1.12.2-14.23.5.2860"
          - "8:1.7.10-10.13.4.1614-1.7.10"
        on:
          - ubuntu-latest
          - windows-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: built
      - name: Configure Version
        id: configure_version
        shell: bash
        env:
          VERSION: ${{ matrix.version }}
        run: |
          MC_VERSION="${VERSION#*:}"
          JAVA_VERSION="${VERSION%%:*}"
          echo "::set-output name=mc_version::$MC_VERSION"
          echo "::set-output name=java_version::$JAVA_VERSION"

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ steps.configure_version.outputs.java_version }}

      - uses: ./
        with:
          version: ${{ steps.configure_version.outputs.mc_version }}

  conclude:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - build
      - test
    steps:
      - name: Conclude Tests
        env: { NEEDS: "${{ toJSON(needs) }}" }
        run: |
          echo "$NEEDS" | jq -c '. | to_entries[] | [.key, .value.result]'
          echo "$NEEDS" | jq -e '. | all(.result == "success")' > /dev/null
